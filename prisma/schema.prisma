// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BetaApplication {
  id          String   @id @default(cuid())
  name        String
  email       String
  position    String
  // Resume stored in database (PDF only)
  resumeData     Bytes?
  resumeFilename String?
  resumeMimeType String?
  resumeSize     Int?
  phone       String?
  website     String?
  coverLetter String?
  status      String   @default("pending") // pending, reviewed, contacted, rejected
  notes       String?
  // Optional link to a JobPosting
  jobId       String?
  job         JobPosting? @relation(fields: [jobId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("beta_applications")
}

model JobPosting {
  id          String   @id @default(cuid())
  title       String
  slug        String
  category    String   // legacy category label
  categoryId  String?
  categoryRef JobCategory? @relation(fields: [categoryId], references: [id])
  type        String   // e.g., Full-time, Part-time, Contract
  location    String   // e.g., Remote, Onsite - City
  description String
  status      String   @default("published")
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  applications BetaApplication[]

  @@map("job_postings")
}

model JobCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  icon      String?
  color     String?
  position  Int      @default(0)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobs JobPosting[]

  @@map("job_categories")
}

model WaitlistEntry {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String
  website     String?
  companySize String?   // small, medium, large
  useCase     String?   // How they plan to use PayPerCrawl
  status      String    @default("pending") // pending, invited, accepted, rejected
  inviteToken String?   @unique
  invitedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("waitlist_entries")
}

model EmailLog {
  id        String   @id @default(cuid())
  to        String
  subject   String
  body      String
  status    String   // sent, failed, pending
  provider  String   // sendgrid, resend, etc.
  createdAt DateTime @default(now())

  @@map("email_logs")
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  // Ticketing fields
  category  String   @default("general") // general, support, careers
  ticketId  String   @unique @default(cuid())
  status    String   @default("open") // open, resolved, archived
  resolutionMessage String?
  resolvedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_submissions")
}

model BlogPost {
  id          String    @id @default(cuid())
  slug        String    @unique
  sourceUrl   String    @unique
  title       String
  content     String
  author      String?
  publishedAt DateTime?
  tags        String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("blog_posts")
}